const mongoose = require('mongoose');

const AlertSchema = new mongoose.Schema({
    studentId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Student',
        required: true
    },
    alertType: {
        type: String,
        enum: [
            'ATTENDANCE_LOW',
            'GRADES_DECLINING', 
            'FEE_OVERDUE',
            'BEHAVIORAL_ISSUE',
            'RISK_SCORE_HIGH',
            'INTERVENTION_NEEDED',
            'FOLLOW_UP_REQUIRED',
            'ACADEMIC_PROBATION',
            'CRITICAL_ALERT'
        ],
        required: true
    },
    priority: {
        type: String,
        enum: ['Low', 'Medium', 'High', 'Critical'],
        required: true
    },
    title: {
        type: String,
        required: true,
        trim: true
    },
    description: {
        type: String,
        required: true,
        trim: true
    },

    // Alert Data
    triggerValue: {
        type: mongoose.Schema.Types.Mixed // Can store any type of data
    },
    threshold: {
        type: mongoose.Schema.Types.Mixed
    },
    currentValue: {
        type: mongoose.Schema.Types.Mixed
    },

    // Status Tracking
    status: {
        type: String,
        enum: ['Active', 'Acknowledged', 'In Progress', 'Resolved', 'Dismissed'],
        default: 'Active'
    },

    // Assignment
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    assignedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },

    // Resolution
    resolvedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    resolvedAt: {
        type: Date
    },
    resolutionNotes: {
        type: String,
        trim: true
    },

    // Notification Tracking
    notifications: [{
        method: {
            type: String,
            enum: ['email', 'sms', 'push', 'in-app']
        },
        recipient: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        sentAt: {
            type: Date,
            default: Date.now
        },
        status: {
            type: String,
            enum: ['sent', 'delivered', 'failed'],
            default: 'sent'
        }
    }],

    // Auto-generated alerts tracking
    isAutoGenerated: {
        type: Boolean,
        default: false
    },
    generatedBy: {
        type: String, // System component that generated the alert
        trim: true
    },

    // Escalation
    escalationLevel: {
        type: Number,
        default: 0,
        min: 0,
        max: 3
    },
    lastEscalated: {
        type: Date
    }
}, {
    timestamps: true
});

// Indexes
AlertSchema.index({ studentId: 1, status: 1 });
AlertSchema.index({ alertType: 1, priority: 1 });
AlertSchema.index({ assignedTo: 1, status: 1 });
AlertSchema.index({ createdAt: 1 });
AlertSchema.index({ priority: 1, status: 1 });

// Methods
AlertSchema.methods.escalate = function() {
    if (this.escalationLevel < 3) {
        this.escalationLevel += 1;
        this.lastEscalated = new Date();
    }
};

AlertSchema.methods.acknowledge = function(userId) {
    this.status = 'Acknowledged';
    this.assignedTo = userId;
};

AlertSchema.methods.resolve = function(userId, notes) {
    this.status = 'Resolved';
    this.resolvedBy = userId;
    this.resolvedAt = new Date();
    this.resolutionNotes = notes;
};

module.exports = mongoose.model('Alert', AlertSchema);